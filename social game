#social_game
import statistics

num_players = int(input("Enter the number of players: "))
data_list = []
# for i in range(num_players):
#     data_list.append([])

# print(data_list)

for i in range(num_players):
    data_per = []
    for j in range(num_players):
        guess = input(f"Player {i+1}, enter your guess for player {j+1}: ")
        data_per.append([j+1, int(guess)])
    data_list.append([i+1, data_per])

# print('data list  ', data_list)
#read and make calculations on the data
priors_per_player = []


for i in range(num_players):
    ppp = []
    for j in range(num_players):
        ppp.append(data_list[j][1][i][1])
    priors_per_player.append([i+1, ppp])

# print('priors p p  ', priors_per_player)

#calculate averages

player_averages = []
for i in range(num_players):
    player_averages.append([i+1, ((statistics.mean(priors_per_player[i][1]) + statistics.median(priors_per_player[i][1]) + statistics.mode(priors_per_player[i][1]))/3)])

# print('avg  ', player_averages)

#calculate differences
diff_priors_per_player = []
for i in range(num_players):
    diff_priors = []
    for j in range(num_players):
        diff_priors.append(abs(player_averages[j][1] - data_list[i][1][j][1]))
    diff_priors_per_player.append([i+1, diff_priors])

# print('diff priors p p  ', diff_priors_per_player)
#determine the winner

other_awareness = []
for i in range(num_players):
    other_awareness.append([i+1, sum(diff_priors_per_player[i][1])-diff_priors_per_player[i][1][i]])

# print('other awareness  ', other_awareness)

self_awareness = []
for i in range(num_players):
    self_awareness.append([i+1, diff_priors_per_player[i][1][i]])

# print('self awareness  ', self_awareness)

#detemine minimum



# Find player with best other-awareness (lowest difference)
min_other_awareness = min(other_awareness, key=lambda x: x[1])
print(f"Player {min_other_awareness[0]} has the best other-awareness")

# Find player with best self-awareness (lowest difference)
min_self_awareness = min(self_awareness, key=lambda x: x[1])
print(f"Player {min_self_awareness[0]} has the best self-awareness")
